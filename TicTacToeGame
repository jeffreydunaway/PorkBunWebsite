<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tic Tac Toe Game</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            margin: 0;
            background-color: #f0f0f0;
        }
        
        .game-container {
            text-align: center;
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        
        h1 {
            color: #333;
            margin-bottom: 20px;
        }
        
        .game-board {
            display: grid;
            grid-template-columns: repeat(3, 100px);
            grid-template-rows: repeat(3, 100px);
            gap: 5px;
            margin: 20px auto;
            background-color: #333;
            padding: 5px;
            border-radius: 8px;
        }
        
        .cell {
            background-color: white;
            border: none;
            font-size: 36px;
            font-weight: bold;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: background-color 0.2s;
        }
        
        .cell:hover {
            background-color: #f5f5f5;
        }
        
        .cell:disabled {
            cursor: not-allowed;
        }
        
        .cell.x {
            color: #e74c3c;
        }
        
        .cell.o {
            color: #3498db;
        }
        
        .game-info {
            margin: 20px 0;
        }
        
        .current-player {
            font-size: 18px;
            margin: 10px 0;
            color: #333;
        }
        
        .game-status {
            font-size: 20px;
            font-weight: bold;
            margin: 15px 0;
            min-height: 25px;
        }
        
        .winner {
            color: #27ae60;
        }
        
        .tie {
            color: #f39c12;
        }
        
        .reset-btn {
            background-color: #3498db;
            color: white;
            border: none;
            padding: 12px 24px;
            font-size: 16px;
            border-radius: 5px;
            cursor: pointer;
            margin-top: 10px;
            transition: background-color 0.2s;
        }
        
        .reset-btn:hover {
            background-color: #2980b9;
        }
        
        .score-board {
            display: flex;
            justify-content: space-around;
            margin: 20px 0;
            background-color: #f8f9fa;
            padding: 15px;
            border-radius: 8px;
        }
        
        .score {
            text-align: center;
        }
        
        .score-label {
            font-weight: bold;
            color: #666;
            margin-bottom: 5px;
        }
        
        .score-value {
            font-size: 24px;
            font-weight: bold;
        }
        
        .score-x {
            color: #e74c3c;
        }
        
        .score-o {
            color: #3498db;
        }
        
        .score-ties {
            color: #f39c12;
        }
    </style>
</head>
<body>
    <div class="game-container">
        <h1>Tic Tac Toe</h1>
        
        <div class="score-board">
            <div class="score">
                <div class="score-label">Player X</div>
                <div class="score-value score-x" id="scoreX">0</div>
            </div>
            <div class="score">
                <div class="score-label">Ties</div>
                <div class="score-value score-ties" id="scoreTies">0</div>
            </div>
            <div class="score">
                <div class="score-label">Player O</div>
                <div class="score-value score-o" id="scoreO">0</div>
            </div>
        </div>
        
        <div class="game-info">
            <div class="current-player" id="currentPlayer">Player X's turn</div>
            <div class="game-status" id="gameStatus"></div>
        </div>
          <div class="game-board" id="gameBoard">
            <button class="cell" data-index="0" aria-label="Cell 1"></button>
            <button class="cell" data-index="1" aria-label="Cell 2"></button>
            <button class="cell" data-index="2" aria-label="Cell 3"></button>
            <button class="cell" data-index="3" aria-label="Cell 4"></button>
            <button class="cell" data-index="4" aria-label="Cell 5"></button>
            <button class="cell" data-index="5" aria-label="Cell 6"></button>
            <button class="cell" data-index="6" aria-label="Cell 7"></button>
            <button class="cell" data-index="7" aria-label="Cell 8"></button>
            <button class="cell" data-index="8" aria-label="Cell 9"></button>
        </div>
        
        <button class="reset-btn" id="resetBtn">New Game</button>
    </div>

    <script>
        class TicTacToe {
            constructor() {
                this.board = Array(9).fill('');
                this.currentPlayer = 'X';
                this.gameActive = true;
                this.scores = {
                    X: 0,
                    O: 0,
                    ties: 0
                };
                
                this.winningConditions = [
                    [0, 1, 2],
                    [3, 4, 5],
                    [6, 7, 8],
                    [0, 3, 6],
                    [1, 4, 7],
                    [2, 5, 8],
                    [0, 4, 8],
                    [2, 4, 6]
                ];
                
                this.initializeGame();
            }
            
            initializeGame() {
                this.cells = document.querySelectorAll('.cell');
                this.currentPlayerElement = document.getElementById('currentPlayer');
                this.gameStatusElement = document.getElementById('gameStatus');
                this.resetButton = document.getElementById('resetBtn');
                this.scoreElements = {
                    X: document.getElementById('scoreX'),
                    O: document.getElementById('scoreO'),
                    ties: document.getElementById('scoreTies')
                };
                
                this.cells.forEach(cell => {
                    cell.addEventListener('click', this.handleCellClick.bind(this));
                });
                
                this.resetButton.addEventListener('click', this.resetGame.bind(this));
                
                this.updateDisplay();
            }
            
            handleCellClick(event) {
                const cell = event.target;
                const index = parseInt(cell.getAttribute('data-index'));
                
                if (this.board[index] !== '' || !this.gameActive) {
                    return;
                }
                
                this.makeMove(index, cell);
            }
            
            makeMove(index, cell) {
                this.board[index] = this.currentPlayer;
                cell.textContent = this.currentPlayer;
                cell.classList.add(this.currentPlayer.toLowerCase());
                cell.disabled = true;
                
                if (this.checkWinner()) {
                    this.handleGameEnd(`Player ${this.currentPlayer} wins!`, 'winner');
                    this.scores[this.currentPlayer]++;
                    this.updateScores();
                } else if (this.checkTie()) {
                    this.handleGameEnd("It's a tie!", 'tie');
                    this.scores.ties++;
                    this.updateScores();
                } else {
                    this.switchPlayer();
                    this.updateDisplay();
                }
            }
            
            checkWinner() {
                return this.winningConditions.some(condition => {
                    const [a, b, c] = condition;
                    return this.board[a] && 
                           this.board[a] === this.board[b] && 
                           this.board[a] === this.board[c];
                });
            }
            
            checkTie() {
                return this.board.every(cell => cell !== '');
            }
            
            switchPlayer() {
                this.currentPlayer = this.currentPlayer === 'X' ? 'O' : 'X';
            }
            
            handleGameEnd(message, statusClass) {
                this.gameActive = false;
                this.gameStatusElement.textContent = message;
                this.gameStatusElement.className = `game-status ${statusClass}`;
                this.currentPlayerElement.textContent = 'Game Over';
                
                // Disable all cells
                this.cells.forEach(cell => {
                    cell.disabled = true;
                });
            }
            
            updateDisplay() {
                if (this.gameActive) {
                    this.currentPlayerElement.textContent = `Player ${this.currentPlayer}'s turn`;
                    this.gameStatusElement.textContent = '';
                    this.gameStatusElement.className = 'game-status';
                }
            }
            
            updateScores() {
                this.scoreElements.X.textContent = this.scores.X;
                this.scoreElements.O.textContent = this.scores.O;
                this.scoreElements.ties.textContent = this.scores.ties;
            }
            
            resetGame() {
                this.board = Array(9).fill('');
                this.currentPlayer = 'X';
                this.gameActive = true;
                
                this.cells.forEach(cell => {
                    cell.textContent = '';
                    cell.disabled = false;
                    cell.classList.remove('x', 'o');
                });
                
                this.updateDisplay();
            }
        }
        
        // Initialize the game when the page loads
        document.addEventListener('DOMContentLoaded', () => {
            new TicTacToe();
        });
    </script>
</body>
</html>
